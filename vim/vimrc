set nocompatible                    " be iMproved, required
set encoding=utf-8                  " set character encoding inside vim

syntax on                           " required for syntax highlighting
filetype plugin indent on           " required
runtime macros/matchit.vim          " activate matchit

" --------------------
" Functions
" --------------------
function! s:EnsureDirectoryExists()
  let required_dir = expand("%:h")

  if !isdirectory(required_dir)
    " Remove this if-clause if you don't need the confirmation
    if !confirm("Directory '" . required_dir . "' doesn't exist. Create it?")
      return
    endif

    try
      call mkdir(required_dir, 'p')
    catch
      echoerr "Can't create '" . required_dir . "'"
    endtry
  endif
endfunction

function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

function! GetFugitiveStatusLine() abort
  let l:git_branch = fugitive#head()
  if strlen(l:git_branch) > 0
    return '  '.l:git_branch.' '
  else
    return ''
  end
endfunction

function! ToggleNumber()
  if(!&relativenumber && !&number)
    set number
  elseif(!&relativenumber)
    set relativenumber
  else
    set norelativenumber
  endif
endfunction

" --------------------
" Plugin configurations
" --------------------

" ale
" Enable completion where available.
" This setting must be set before ALE is loaded.
let g:ale_completion_enabled = 1
let b:ale_set_balloons = 1

" fzf
set rtp+=~/.fzf
nnoremap <C-p> :FZF<cr>
nnoremap <C-f> :GFiles<cr>

" editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" ripgrep
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --sort-files
  set grepformat=%f:%l:%c:%m,%f:%l:%m
  function! MySearch()
    let grep_term = input("Enter search term: ")
    if !empty(grep_term)
      execute 'silent grep!' grep_term | copen
    else
      echo "Empty search term"
    endif
    redraw!
  endfunction
  command! Search call MySearch()
  nnoremap \ :Search<CR>

  augroup global_search
    autocmd!
    autocmd Filetype * if &ft!="git"|nnoremap K "ayiw :Search<CR><C-r>a<CR>|endif
    autocmd Filetype * if &ft!="git"|vnoremap K "ay :Search<CR>'<C-r>a'<CR>|endif
  augroup end
endif

" --------------------
" Key bindings
" --------------------
let mapleader = "\<Space>"          " Map the leader to spacebar rather than \
nmap <leader>vr :tabedit $MYVIMRC<cr>
nnoremap <leader>o :Files<cr>
nnoremap <leader>h :nohlsearch<cr>
imap <C-l> <C-x><C-l>
noremap <leader>n :cnext<C-m>
noremap <leader>p :cprev<C-m>
nnoremap <C-n> :call ToggleNumber()<cr>
" Switching panes
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" --------------------
" Basic configurations
" --------------------
set mouse=a                         " Enable mouse support
set hidden
set noswapfile                      " Don't create swap file
set nobackup                        " Don't create backup files
set diffopt=vertical
set clipboard=unnamedplus               " Yank to system clipboard
set noerrorbells                    " Turn off the bell
set backspace=indent,eol,start      " allow backspacing over everything

" set completeopt=longest,menuone,preview

" reload vimrc
nmap <leader>so :source $MYVIMRC<cr>

" Bind `q` to close quickfix window
augroup quickfix_key_bindings
  autocmd!
  autocmd BufReadPost quickfix nnoremap <buffer> q :q <CR>
  autocmd BufReadPost quickfix nnoremap <silent> <buffer> h  <C-W><CR><C-w>K
  autocmd BufReadPost quickfix noremap <silent> <buffer> H  <C-W><CR><C-w>K<C-w>b
  autocmd BufReadPost quickfix noremap <silent> <buffer> o  <CR>
  autocmd BufReadPost quickfix noremap <silent> <buffer> t  <C-w><CR><C-w>T
  autocmd BufReadPost quickfix noremap <silent> <buffer> T  <C-w><CR><C-w>TgT<C-W><C-W>
  autocmd BufReadPost quickfix noremap <silent> <buffer> v  <C-w><CR><C-w>H<C-W>b<C-W>J<C-W>t
  " Bind `q` to close the buffer for help files
  autocmd Filetype help nnoremap <buffer> q :q<cr>
augroup end

" automatically rebalance windows on vim resize
augroup vim_resizing_key_bindings
  autocmd!
  autocmd VimResized * :wincmd =
augroup end

" Support yaml front matter in markdown files
augroup markdown
  autocmd!
  autocmd BufNewFile,BufRead,BufWrite *.md,*.haml,*.html syntax match Comment /\%^---\_.\{-}---$/ contains=@Spell
augroup end

augroup nginx
  autocmd!
  autocmd BufNewFile,BufRead,BufWrite *nginx.conf* set ft=nginx
augroup end

let tern_show_signature_in_pum = 1
let tern_show_argument_hints = 'on_hold'
augroup javascript_auto_cmds
  autocmd!
  autocmd FileType javascript nnoremap <leader>d :TernDef<CR>
  autocmd FileType javascript nnoremap <leader>r :TernRefs<CR>
  autocmd FileType javascript setlocal omnifunc=tern#Complete
augroup end

" CSS auto commands
augroup css_auto_cmds
  autocmd!
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS
  autocmd BufNewFile,BufRead *.scss,*.styl set ft=css
augroup end

" Upon saving a file in a new directory, create the directory if it does not
" exist on confirmation.
augroup ensure_directory_exists
  autocmd!
  autocmd BufNewFile * call s:EnsureDirectoryExists()
augroup end

" --------------------
" GUI configurations
" --------------------
set lazyredraw                      " disable redraw during actions
set autoread                        " display file changes immediately
set ttyfast                         " more characters sent to the screen to for smoother redraws
set title                           " set the title to the value of 'titlestring'
set showmode                        " shows the current mode
set showcmd                         " show the current command
set laststatus=2                    " always show status line
set statusline=
" set statusline+=%{fugitive#statusline()}
" set statusline+=%{StatuslineGit()}
" set statusline+=%{b:gitstatus}
set statusline+=%{GetFugitiveStatusLine()}
set statusline+=%#LineNr#
set statusline+=\ %<%f
set statusline+=%m
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\ " Whitespace is needed
set number                          " enable line number
" set relativenumber                  " enable relative line number
" set cursorline                      " highlight cursor line
set history=500
set list                            " show spaces and tabs
set listchars=tab:»·,trail:·,nbsp:· " string represented in `list`
set splitright                      " open new vertical split panes to right
set splitbelow                      " open new split panes to the bottom
set visualbell                      " Set visual bell instad of a 'BEEP'
set wildmenu

" --------------------
" Text and display formatting
" --------------------
set shiftround
set expandtab
set autoindent
set copyindent

set nohlsearch
set incsearch
set hlsearch
set ignorecase
set smartcase
set wrap                            " wrap line when lines are longer than the window width

" --------------------
" Visual display
" --------------------
set t_Co=256
syntax sync minlines=256

" --------------------
" Generate help files
" --------------------
" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL

function! TmuxMove(direction)
        let wnr = winnr()
        silent! execute 'wincmd ' . a:direction
        " If the winnr is still the same after we moved, it is the last pane
        if wnr == winnr()
                call system('tmux select-pane -' . tr(a:direction, 'phjkl', 'lLDUR'))
        end
endfunction

nnoremap <silent> <c-h> :call TmuxMove('h')<cr>
nnoremap <silent> <c-j> :call TmuxMove('j')<cr>
nnoremap <silent> <c-k> :call TmuxMove('k')<cr>
nnoremap <silent> <c-l> :call TmuxMove('l')<cr>
