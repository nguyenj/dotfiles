set nocompatible                    " be iMproved, required
set encoding=utf-8                  " set character encoding inside vim

filetype off                        " required

" --------------------
" Plugins
" --------------------
if filereadable(expand("~/.dotfiles/vim/vimrc.vundles"))
  source ~/.dotfiles/vim/vimrc.vundles
endif

syntax on                           " required for syntax highlighting
filetype plugin indent on           " required
runtime macros/matchit.vim          " activate matchit

" --------------------
" Plugin configurations
" --------------------
" fzf
set rtp+=~/.fzf

" editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" ripgrep
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
  function! MySearch()
    let grep_term = input("Enter search term: ")
    if !empty(grep_term)
      execute 'silent grep!' grep_term | copen
    else
      echo "Empty search term"
    endif
    redraw!
  endfunction
  command! Search call MySearch()
  nnoremap \ :Search<CR>
  nnoremap K "ayiw :Search<CR><C-r>a<CR>
  vnoremap K "ay :Search<CR>'<C-r>a'<CR>
endif

" --------------------
" Key bindings
" --------------------
let mapleader = "\<Space>"          " Map the leader to spacebar rather than \
nmap <leader>vr :tabedit $MYVIMRC<cr>
nmap <leader>vb :tabedit $HOME/.dotfiles/vim/vimrc.vundles<cr>
nnoremap <leader>h :nohlsearch<cr>
imap <C-l> <C-x><C-l>

" --------------------
" Basic configurations
" --------------------
set mouse=a                         " Enable mouse support
set hidden
set noswapfile                      " Don't create swap file
set nobackup                        " Don't create backup files
set diffopt=vertical
set clipboard=unnamed               " Yank to system clipboard
set noerrorbells                    " Turn off the bell
set backspace=indent,eol,start      " allow backspacing over everything

" set completeopt=longest,menuone,preview

" Plugin Dispatch
" Run rspec test
nnoremap <leader>s :Dispatch bin/rspec <c-r>=expand("%:p")<cr>:<c-r>=line(".")<cr> --format doc --color<cr>
nnoremap <leader>S :Dispatch bin/rspec <c-r>=expand("%:p")<cr> --format doc --color<cr>
set shellpipe+=\ 

" reload vimrc
nmap <leader>so :source $MYVIMRC<cr>
" " Pre-populate a split command with the current directory
" nmap <leader>n :tabnew <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>
" " Map 0 to ^
" nmap 0 ^
" " Move up and down by visible lines if current line is wrapped
" nmap j gj
" " nmap k g

" " Quicker max screen for horizontal splits
" nnoremap <C-f> <C-w>_
" " Quicker equalize screen for horizontal splits
" nnoremap = <C-w>=

" Bind `q` to close quickfix window
autocmd BufReadPost quickfix nnoremap <buffer> q :q <CR>
autocmd BufReadPost quickfix nnoremap <silent> <buffer> h  <C-W><CR><C-w>K
autocmd BufReadPost quickfix noremap <silent> <buffer> H  <C-W><CR><C-w>K<C-w>b
autocmd BufReadPost quickfix noremap <silent> <buffer> o  <CR>
autocmd BufReadPost quickfix noremap <silent> <buffer> t  <C-w><CR><C-w>T
autocmd BufReadPost quickfix noremap <silent> <buffer> T  <C-w><CR><C-w>TgT<C-W><C-W>
autocmd BufReadPost quickfix noremap <silent> <buffer> v  <C-w><CR><C-w>H<C-W>b<C-W>J<C-W>t
" Bind `q` to close the buffer for help files
autocmd Filetype help nnoremap <buffer> q :q<cr>
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" Support hamlc syntax, because it's basically haml
autocmd BufRead,BufNewFile *.hamlc set ft=haml
" Support yaml front matter in markdown files
autocmd BufNewFile,BufRead,BufWrite *.md,*.haml,*.html syntax match Comment /\%^---\_.\{-}---$/ contains=@Spell
" Vim sometimes get confused when files include multiple languages
autocmd FileType vue syntax sync fromstart

autocmd BufNewFile,BufRead,BufWrite *nginx.conf* set ft=nginx

" CSS auto commands
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd BufNewFile,BufRead *.scss,*.styl set ft=css

" Ruby auto commands
autocmd Filetype ruby nmap <buffer> <Leader>de <S-o>require 'pry-remote';binding.remote_pry<Esc>

" Javascript auto commands
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd Filetype javascript,coffee,typescript nmap <buffer> <Leader>de <S-o>debugger<Esc>

" Upon saving a file in a new directory, create the directory if it does not
" exist on confirmation.
augroup ensure_directory_exists
  autocmd!
  autocmd BufNewFile * call s:EnsureDirectoryExists()
augroup end
function! s:EnsureDirectoryExists()
  let required_dir = expand("%:h")

  if !isdirectory(required_dir)
    " Remove this if-clause if you don't need the confirmation
    if !confirm("Directory '" . required_dir . "' doesn't exist. Create it?")
      return
    endif

    try
      call mkdir(required_dir, 'p')
    catch
      echoerr "Can't create '" . required_dir . "'"
    endtry
  endif
endfunction

" --------------------
" GUI configurations
" --------------------
set lazyredraw                      " disable redraw during actions
set autoread                        " display file changes immediately
set ttyfast                         " more characters sent to the screen to for smoother redraws
set title                           " set the title to the value of 'titlestring'
set showmode                        " shows the current mode
set showcmd                         " show the current command
set laststatus=2                    " always show status line
set statusline+=\ %{fugitive#statusline()}\ 
set statusline+=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P\ 
set number                          " enable line number
set cursorline                      " highlight cursor line
set history=500
set list                            " show spaces and tabs
set listchars=tab:»·,trail:·,nbsp:· " string represented in `list`
set splitright                      " open new vertical split panes to right
set splitbelow                      " open new split panes to the bottom
set visualbell                      " Set visual bell instad of a 'BEEP'
set wildmenu

function! ToggleNumber()
  if(!&relativenumber && !&number)
    set number
  elseif(!&relativenumber)
    set relativenumber
  else
    set norelativenumber
  endif
endfunc
nnoremap <C-n> :call ToggleNumber()<cr>

" --------------------
" Text and display formatting
" --------------------
set shiftround
set expandtab
set autoindent
set copyindent

set nohlsearch
set incsearch
set hlsearch
set ignorecase
set smartcase
set wrap                            " wrap line when lines are longer than the window width

" --------------------
" Visual display
" --------------------
if filereadable(expand("~/.vimrc_background"))
  set background=dark
  let base16colorspace=256
  source ~/.vimrc_background
endif

nnoremap <C-e> :Lexplore<cr>

let g:netrw_localrmdir='rm -r'
